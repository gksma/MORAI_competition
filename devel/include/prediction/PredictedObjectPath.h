// Generated by gencpp from file prediction/PredictedObjectPath.msg
// DO NOT EDIT!


#ifndef PREDICTION_MESSAGE_PREDICTEDOBJECTPATH_H
#define PREDICTION_MESSAGE_PREDICTEDOBJECTPATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <prediction/TrackedPoint.h>

namespace prediction
{
template <class ContainerAllocator>
struct PredictedObjectPath_
{
  typedef PredictedObjectPath_<ContainerAllocator> Type;

  PredictedObjectPath_()
    : unique_id(0)
    , path()  {
    }
  PredictedObjectPath_(const ContainerAllocator& _alloc)
    : unique_id(0)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _unique_id_type;
  _unique_id_type unique_id;

   typedef std::vector< ::prediction::TrackedPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::prediction::TrackedPoint_<ContainerAllocator> >> _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::prediction::PredictedObjectPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prediction::PredictedObjectPath_<ContainerAllocator> const> ConstPtr;

}; // struct PredictedObjectPath_

typedef ::prediction::PredictedObjectPath_<std::allocator<void> > PredictedObjectPath;

typedef boost::shared_ptr< ::prediction::PredictedObjectPath > PredictedObjectPathPtr;
typedef boost::shared_ptr< ::prediction::PredictedObjectPath const> PredictedObjectPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prediction::PredictedObjectPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prediction::PredictedObjectPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prediction::PredictedObjectPath_<ContainerAllocator1> & lhs, const ::prediction::PredictedObjectPath_<ContainerAllocator2> & rhs)
{
  return lhs.unique_id == rhs.unique_id &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prediction::PredictedObjectPath_<ContainerAllocator1> & lhs, const ::prediction::PredictedObjectPath_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prediction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prediction::PredictedObjectPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prediction::PredictedObjectPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prediction::PredictedObjectPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prediction::PredictedObjectPath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prediction::PredictedObjectPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prediction::PredictedObjectPath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prediction::PredictedObjectPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a136606ffb64a5c19dfc192304ca3b46";
  }

  static const char* value(const ::prediction::PredictedObjectPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa136606ffb64a5c1ULL;
  static const uint64_t static_value2 = 0x9dfc192304ca3b46ULL;
};

template<class ContainerAllocator>
struct DataType< ::prediction::PredictedObjectPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prediction/PredictedObjectPath";
  }

  static const char* value(const ::prediction::PredictedObjectPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prediction::PredictedObjectPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 unique_id\n"
"\n"
"TrackedPoint[] path\n"
"\n"
"================================================================================\n"
"MSG: prediction/TrackedPoint\n"
"float64 x\n"
"float64 y\n"
"float64 v\n"
"float64 a\n"
"float64 theta\n"
"float64 theta_rate\n"
;
  }

  static const char* value(const ::prediction::PredictedObjectPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prediction::PredictedObjectPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictedObjectPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prediction::PredictedObjectPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prediction::PredictedObjectPath_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "unique_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.unique_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "path: ";
    if (v.path.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::prediction::TrackedPoint_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.path[i]);
    }
    if (v.path.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // PREDICTION_MESSAGE_PREDICTEDOBJECTPATH_H
