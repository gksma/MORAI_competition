// Generated by gencpp from file prediction/TrackedObjectPose.msg
// DO NOT EDIT!


#ifndef PREDICTION_MESSAGE_TRACKEDOBJECTPOSE_H
#define PREDICTION_MESSAGE_TRACKEDOBJECTPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <prediction/TrackedPoint.h>

namespace prediction
{
template <class ContainerAllocator>
struct TrackedObjectPose_
{
  typedef TrackedObjectPose_<ContainerAllocator> Type;

  TrackedObjectPose_()
    : unique_id(0)
    , pose()  {
    }
  TrackedObjectPose_(const ContainerAllocator& _alloc)
    : unique_id(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _unique_id_type;
  _unique_id_type unique_id;

   typedef  ::prediction::TrackedPoint_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::prediction::TrackedObjectPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prediction::TrackedObjectPose_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedObjectPose_

typedef ::prediction::TrackedObjectPose_<std::allocator<void> > TrackedObjectPose;

typedef boost::shared_ptr< ::prediction::TrackedObjectPose > TrackedObjectPosePtr;
typedef boost::shared_ptr< ::prediction::TrackedObjectPose const> TrackedObjectPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prediction::TrackedObjectPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prediction::TrackedObjectPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prediction::TrackedObjectPose_<ContainerAllocator1> & lhs, const ::prediction::TrackedObjectPose_<ContainerAllocator2> & rhs)
{
  return lhs.unique_id == rhs.unique_id &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prediction::TrackedObjectPose_<ContainerAllocator1> & lhs, const ::prediction::TrackedObjectPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prediction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prediction::TrackedObjectPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prediction::TrackedObjectPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prediction::TrackedObjectPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prediction::TrackedObjectPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prediction::TrackedObjectPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prediction::TrackedObjectPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prediction::TrackedObjectPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7690af574bf077cf4e6a344bb466312f";
  }

  static const char* value(const ::prediction::TrackedObjectPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7690af574bf077cfULL;
  static const uint64_t static_value2 = 0x4e6a344bb466312fULL;
};

template<class ContainerAllocator>
struct DataType< ::prediction::TrackedObjectPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prediction/TrackedObjectPose";
  }

  static const char* value(const ::prediction::TrackedObjectPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prediction::TrackedObjectPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 unique_id\n"
"\n"
"TrackedPoint pose\n"
"\n"
"================================================================================\n"
"MSG: prediction/TrackedPoint\n"
"float64 x\n"
"float64 y\n"
"float64 v\n"
"float64 a\n"
"float64 theta\n"
"float64 theta_rate\n"
;
  }

  static const char* value(const ::prediction::TrackedObjectPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prediction::TrackedObjectPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedObjectPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prediction::TrackedObjectPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prediction::TrackedObjectPose_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "unique_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.unique_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pose: ";
    Printer< ::prediction::TrackedPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PREDICTION_MESSAGE_TRACKEDOBJECTPOSE_H
